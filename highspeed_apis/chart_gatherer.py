print("SOF")
import time as t
import numpy as np
import pandas as pd
from interruptingcow import timeout as to
import threading
import websocket
import json
import zlib
import time
import pickle
from os import listdir
from os.path import isfile, join
import matplotlib as mpl

'''
//request
{
  "req": "market.ethusdt.kline.$period",
  "id": "id generated by client",
  "from": "start timestamp",
  "to": "to timestamp"
}
'''

with open('data/master_pandas.pkl', 'rb') as handle: master_df = pickle.load(handle)
to_ts = np.max(master_df.index.values)
from_ts = np.min(master_df.index.values)

#baseic ping message:
ping = {'ping' : 18212558000}
pong = {'pong' : 18212558000}

'''
1552334326045000
1552331924839000
1513391453

1552334326
1552331924
'''



#request
request = {"req": "market.ethusdt.kline.1min","id": "id10", "from": 1552331924, "to": 1552334326}
'''
request = {
  "req": "market.ethusdt.kline.1min",
  "id": "id10",
  
}
'''

base_url = 'wss://api.huobi.pro/hbus/ws'
ws = websocket.WebSocket()
ws.connect(base_url)
ws.send(json.dumps(request))
response = json.loads(zlib.decompress(ws.recv(), 16+zlib.MAX_WBITS).decode('utf8'))['data']

max_dict = {}
for a in response:
    tmp = pd.DataFrame.from_dict(a, orient='index', columns=['values'])
    max_dict[tmp['values']['id']] = tmp

df_dict = pd.DataFrame.from_dict(max_dict, orient='index',columns=['tables']).sort_index()

'''
              values
id      1.552333e+09
open    1.323100e+02
close   1.322800e+02
low     1.322400e+02
high    1.323100e+02
amount  2.526408e+02
vol     3.342153e+04
count   2.400000e+01
'''

open_arr = []
close_arr = []
high_arr = []
low_arr = []
amount_arr = []
vol_arr = []
count_arr = []

for a in df_dict.loc[df_dict.index.values,'tables']:
    open_arr.append(a.loc['open'][0])
    close_arr.append(a.loc['close'][0])
    high_arr.append(a.loc['high'][0])
    low_arr.append(a.loc['low'][0])
    amount_arr.append(a.loc['amount'][0])
    vol_arr.append(a.loc['vol'][0])
    count_arr.append(a.loc['count'][0])

open_arr = np.array(open_arr)
close_arr = np.array(close_arr)
high_arr = np.array(high_arr)
low_arr = np.array(low_arr)
amount_arr = np.array(amount_arr)
vol_arr = np.array(vol_arr)
count_arr = np.array(count_arr)
range_arr = np.array(range(40))+1552331924

data = {'open':open_arr,'low':low_arr,'high':high_arr,'close':close_arr,'amount':amount_arr,'volume':vol_arr,'count':count_arr}

print(len(range_arr))

master_chart = pd.DataFrame(data=data, index=range_arr)



print(master_chart)
with open('data/master_chart.pkl', 'wb') as handle: pickle.dump(master_chart, handle, protocol=pickle.HIGHEST_PROTOCOL)


#for a in df_dict:



'''
while True:
    response = json.loads(zlib.decompress(ws.recv(), 16+zlib.MAX_WBITS).decode('utf8'))
    print()
    print(response)
    print()
    if('ping' in list(response.keys())):
        ws.send(json.dumps(pong))
    elif('pong' in list(response.keys())):
        ws.send(json.dumps(ping))
    elif('status' in list(response.keys()) and response['status'] == 'ok'):
        ws.close()
    else:
        ws.send(json.dumps(request))
'''

print("EOF")